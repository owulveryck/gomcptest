digraph chat_architecture {
    rankdir=TB;
    node [shape=box, style="rounded,filled", fillcolor=lightblue];

    subgraph cluster_user {
        label = "User";
        style = "dashed";
        user [label="Chat\nðŸ‘¤", shape=plaintext];
        ui [label="UI\nðŸ’»", tooltip="Web/Mobile App"];
    }

   subgraph application {
       label = "Application";
       style = "dashed";
   }
    subgraph cluster_frontend {
        label = "Frontend (BIG-AGI)\n(out of scope)";
        style = "dashed";
        frontend [label="FRONTEND\nBIG-AGI", shape=hexagon, fillcolor=lightyellow, tooltip="Handles user input and displays responses"];
    }

    subgraph cluster_backend {
        label = "MCP Host (Backend)\nhost/openaiserver";
        style = "dashed";
        api_gateway [label="API Gateway\n(api_gateway)", shape=box, fillcolor=lightgreen, tooltip="Receives requests from frontend"];
        chat_handler [label="Chat Session\nHandler\n(chat.go)", shape=hexagon, fillcolor=lightyellow, tooltip="Manages chat sessions, history, and orchestrates interactions"];
        vertex_sdk [label="VERTEX AI SDK\n(vertex.go)", shape=box, fillcolor=lightgreen, tooltip="Connects to and interacts with the LLM"];
        db [label="Data Storage\n(Not Implemented)", shape=cylinder, fillcolor=lightgrey, tooltip="Stores chat history and other data"];
        error_handler [label="Error Handler\n(Not Implemented)", shape=component, fillcolor=lightgrey, tooltip="Handles errors and exceptions"];
        monitoring [label="Monitoring\n(Not Implemented)", shape=component, fillcolor=lightgrey, tooltip="Collects metrics and logs"];
        logging [label="Logging\n(Not Implemented)", shape=component, fillcolor=lightgrey, tooltip="Logs application events"];
    
   subgraph cluster_mcp {
        label = "MCP Client";
        style = "dashed";
        mcp_protocol [label="MCP\nJSON RPC\nSSE\n(function_client_mcp.go)", shape=box, fillcolor=lightgreen, tooltip="Communicates with the external environment"];
    }
   }
    subgraph cluster_gcp {
        label = "GCP PRIVATE PROJECT\nTENANT";
        style = "dashed";
        llm [label="LLM\nGemini", shape=circle, fillcolor=lightgrey, tooltip="Large Language Model"];
    }
    
    subgraph cluster_environment {
        label = "ENVIRONMENT";
        style = "dashed";
        mcp_server [label="MCP\nSERVER", shape=hexagon, fillcolor=lightyellow, tooltip="Executes actions and reads resources"];
        
        subgraph cluster_filesystem_tools {
            label = "Filesystem Tools";
            style = "dashed";
            ls_tool [label="LS\n(tools/LS)", shape=component, fillcolor=lightcoral, tooltip="List directories"];
            view_tool [label="View\n(tools/View)", shape=component, fillcolor=lightcoral, tooltip="Read files"];
            edit_tool [label="Edit\n(tools/Edit)", shape=component, fillcolor=lightcoral, tooltip="Edit files"];
            replace_tool [label="Replace\n(tools/Replace)", shape=component, fillcolor=lightcoral, tooltip="Replace file contents"];
            glob_tool [label="GlobTool\n(tools/GlobTool)", shape=component, fillcolor=lightcoral, tooltip="Find files by pattern"];
            grep_tool [label="GrepTool\n(tools/GrepTool)", shape=component, fillcolor=lightcoral, tooltip="Search file contents"];
        }
        
        subgraph cluster_system_tools {
            label = "System Tools";
            style = "dashed";
            bash_tool [label="Bash\n(tools/Bash)", shape=component, fillcolor=orange, tooltip="Execute shell commands"];
            dispatch_agent [label="dispatch_agent\n(tools/dispatch_agent)", shape=component, fillcolor=orange, tooltip="Create sub-agents"];
        }
        
        subgraph cluster_ai_tools {
            label = "AI/ML Tools";
            style = "dashed";
            imagen_tool [label="imagen\n(tools/imagen)", shape=component, fillcolor=pink, tooltip="Generate images with Google Imagen"];
        }
        
        subgraph cluster_data_tools {
            label = "Data Tools";
            style = "dashed";
            duckdb_tool [label="duckdbserver\n(tools/duckdbserver)", shape=component, fillcolor=lightseagreen, tooltip="SQL data processing"];
        }
    }

 

    user -> ui [label=""];
    ui -> frontend [label="HTTP"];
    frontend -> api_gateway [label="HTTP POST /v1/chat/completions"];
    api_gateway -> chat_handler [label=""];
    chat_handler -> vertex_sdk [label=""];
    vertex_sdk -> llm [label="gRPC"];
    chat_handler -> mcp_protocol [label="REGISTER FUNCTIONS\nCALL FUNCTIONS", tooltip="Registers and calls specific functions"];
    mcp_protocol -> mcp_server [label="STDIO"];
    mcp_server -> mcp_server [label="READ\nRESOURCES", dir=both, tooltip="Reads resources from the environment"];
    mcp_server -> mcp_server [label="EXECUTE\nACTIONS", dir=both, tooltip="Executes actions in the environment"];
    chat_handler -> db [label="Store History", style=dashed];
    chat_handler -> error_handler [label="Handle Errors", style=dashed];
    chat_handler -> monitoring [label="Collect Metrics", style=dashed];
    chat_handler -> logging [label="Collect Logs", style=dashed];
    
    mcp_server -> ls_tool [label="invoke"];
    mcp_server -> view_tool [label="invoke"];
    mcp_server -> edit_tool [label="invoke"];
    mcp_server -> replace_tool [label="invoke"];
    mcp_server -> glob_tool [label="invoke"];
    mcp_server -> grep_tool [label="invoke"];
    mcp_server -> bash_tool [label="invoke"];
    mcp_server -> dispatch_agent [label="invoke"];
    mcp_server -> imagen_tool [label="invoke"];
    mcp_server -> duckdb_tool [label="invoke"];
    
    note [label="Generative\nmodel can\ngenerate\ntext", shape=note, style="filled", fillcolor=white];
    note -> llm [style=invis];
}
